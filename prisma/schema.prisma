generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account_info {
  account_number  Int      @id
  account_type    String
  account_balance Decimal? @db.Decimal
}

model course_enrollments {
  enrollment_id Int       @id @default(autoincrement())
  student_id    Int?
  course_id     Int?
  semester      String?   @db.VarChar(10)
  academic_year String?   @db.VarChar(10)
  courses       courses?  @relation(fields: [course_id], references: [course_id], onDelete: NoAction, onUpdate: NoAction)
  students      students? @relation(fields: [student_id], references: [student_id], onDelete: NoAction, onUpdate: NoAction)
}

model course_lecturers {
  id          Int        @id @default(autoincrement())
  course_id   Int?
  lecturer_id Int?
  courses     courses?   @relation(fields: [course_id], references: [course_id], onDelete: NoAction, onUpdate: NoAction)
  lecturers   lecturers? @relation(fields: [lecturer_id], references: [lecturer_id], onDelete: NoAction, onUpdate: NoAction)
}

model courses {
  course_id          Int                  @id @default(autoincrement())
  course_code        String?              @unique @db.VarChar(10)
  course_name        String?              @db.VarChar(100)
  credit_hours       Int?
  course_enrollments course_enrollments[]
  course_lecturers   course_lecturers[]
}

model customer {
  id           Int            @id
  productorder productorder[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model employee {
  emp_name  String?
  salary___ Decimal? @map("salary($)") @db.Decimal(6, 2)

  @@ignore
}

model fee_payments {
  payment_id    Int       @id @default(autoincrement())
  student_id    Int?
  amount_paid   Decimal?  @db.Decimal(10, 2)
  payment_date  DateTime? @db.Date
  academic_year String?   @db.VarChar(10)
  students      students? @relation(fields: [student_id], references: [student_id], onDelete: NoAction, onUpdate: NoAction)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model just_now {
  log_emp_name  String?
  old_salary___ Decimal? @map("old_salary($)") @db.Decimal(6, 2)

  @@ignore
}

model lecturer_tas {
  id                  Int                  @id @default(autoincrement())
  lecturer_id         Int?
  ta_id               Int?
  lecturers           lecturers?           @relation(fields: [lecturer_id], references: [lecturer_id], onDelete: NoAction, onUpdate: NoAction)
  teaching_assistants teaching_assistants? @relation(fields: [ta_id], references: [ta_id], onDelete: NoAction, onUpdate: NoAction)
}

model lecturers {
  lecturer_id      Int                @id @default(autoincrement())
  full_name        String?            @db.VarChar(100)
  department       String?            @db.VarChar(100)
  email            String?            @db.VarChar(100)
  course_lecturers course_lecturers[]
  lecturer_tas     lecturer_tas[]
}

model productorder {
  order_id         Int      @id @default(autoincrement())
  product_category String   @db.VarChar(50)
  product_id       Int
  customer_id      Int
  customer         customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  products         products @relation(fields: [product_category, product_id], references: [category, id])
}

model products {
  id           Int
  category     String
  productorder productorder[]

  @@id([id, category])
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model products_log {
  product_id       Int?
  product_name     String?   @db.VarChar(30)
  product_category String?
  insert_timestamp DateTime? @db.Timestamp(6)
  user_info        String?

  @@ignore
}

model students {
  student_id         Int                  @id @default(autoincrement())
  full_name          String?              @db.VarChar(100)
  email              String?              @unique @db.VarChar(100)
  program            String?              @db.VarChar(50)
  level              Int?
  date_of_birth      DateTime?            @db.Date
  course_enrollments course_enrollments[]
  fee_payments       fee_payments[]
}

model teaching_assistants {
  ta_id        Int            @id @default(autoincrement())
  full_name    String?        @db.VarChar(100)
  email        String?        @db.VarChar(100)
  lecturer_tas lecturer_tas[]
}

model try_products {
  product_id       Int      @id
  product_name     String?  @db.VarChar(30)
  product_category String?
  price___         Decimal? @map("price($)") @db.Decimal(6, 2)
  stock_quantity   Int?
}


model user {
  id       Int    @id @default(autoincrement())
  email    String @unique
  username String
  password String
  createdAt DateTime @default(now())
}
